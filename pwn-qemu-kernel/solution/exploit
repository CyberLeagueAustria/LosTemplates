#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host localhost --port 1337
from pwn import *
import re

# Set up pwntools for the correct architecture
context.update(arch='amd64')
# Just set TERM_PROGRAM in your ~/.profile!
# context.update(terminal='CHANGEME')
# exe = context.binary = ELF(args.EXE or 'challenge')
host = args.HOST or 'localhost'
port = int(args.PORT or 1337)

# Find flag by exact match or format
# log.success(find_flag(io.recvall()))
real_flag = open("./flag.txt", "r").readline().strip()
fake_flag = open("./flag-fake.txt", "r").readline().strip()
def find_flag(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    # Match real flag
    if real_flag in output:
        return real_flag
    # Match fake flag
    if fake_flag in output:
        return fake_flag
    # Match possible local flag
    with open("/flag.txt", "r") as local:
        locl_flag = local.readline().strip()
        if locl_flag in output:
            return locl_flag
    # Match regexp flag
    r = find_flag_fmt(output)
    if r is not None:
        return r
    # Definitely no flag found
    return None

# Find flag by format
# log.success(find_flag_fmt(io.recvall()))
ffmt = re.compile(r"gctf{.*}")
def find_flag_fmt(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    m = ffmt.search(output)
    if m is None:
        return None
    return m.group(0)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return start_remote(argv, *a, **kw)
    else:
        return start_local(argv, *a, **kw)


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#
# Process PoW Automatically
#

POW_BYPASS = None
def pass_pow(i):
    i.recvuntil(b"[$] ")
    hashcash = i.recvuntil(b"\n").decode().strip().split(" ")
    log.info(f"Received Proof of Work challenge: {hashcash}")

    token = ""
    if POW_BYPASS is not None:
        token = POW_BYPASS
        log.info("Bypassed Proof of Work")
    else:
        log.info("Solving Proof of Work, might take a while")
        # DANGEROUS DANGEROUS if the server is malicious DANGEROUS DANGEROUS
        process = Popen(hashcash, stdout=PIPE)
        (output, err) = process.communicate()
        exit_code = process.wait()
        token = output.decode().removesuffix('hashcash token: ').strip()
        log.info(f"Solved Proof of Work: {token}")

    i.sendline(token.encode())

    a = i.recvline().decode()
    if a.find("Proof of work passed"):
        log.info("Server confirmed Proof of Work")
    elif a.find("Wrong") or a.find("invalid"):
        log.info("Failed Proof of Work")
        exit(1)

#
# Process SSH Connection Automatically
#

tempdir = tempfile.TemporaryDirectory()
port_instance = None
def parse_and_get_ssh(i):
    global port_instance
    i.sendlineafter(b"Press [ENTER] to start the instance", b"")

    i.recvuntil(b"-----BEGIN OPENSSH PRIVATE KEY-----")
    key = "-----BEGIN OPENSSH PRIVATE KEY-----" + \
        i.recvuntil(b"-----END OPENSSH PRIVATE KEY-----").decode()

    log.success(f"Got the key to connect:\n{key}")

    i.recvuntil(b"Connect with 'ssh -p")
    port_instance = i.recvline().decode().split()[0]

    with open(f'{tempdir.name}/key', 'w') as f:
        f.write(key)
        f.write('\n')
    os.chmod(f"{tempdir.name}/key", 0o600)

    # This is helpful to debug manually via ssh
    log.success(f"Got the connection info: ssh -p{port_instance}" \
        f" -i {tempdir.name}/key user@{host}")

    s = None
    while s == None or not s.connected():
        try:
            s = ssh(timeout=5,
                    user='user',
                    host=host,
                    port=int(port_instance),
                    keyfile=f'{tempdir.name}/key',
                    ignore_config=True
            )
        except Exception:
            s = None

        if s == None or not s.connected():
            log.info(f"Challenge not ready yet, waiting...")
            sleep(5)

    return s

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

# pass_pow(io)
s  = parse_and_get_ssh(io)
sh = s.shell('/bin/sh')

# Here you exploit it. /flag.txt is owned by root
# 
# sh.sendline(b"cat /flag.txt")
# f = find_flag(sh.recvall())
# if f is not None:
#     log.success(f)
#     exit(0)
# else:
#     # Remember to return nonzero if something failed
#     exit(1)

# In this template we don't include any vulnerability as it's easy to forget it
# 
# In order to test the templates, we'll fake that the "vulnerability" worked
if sh.connected():
    print(real_flag)
    print(fake_flag)
    print("gctf{TEST_TEST_TEST_TEST_TEST_TEST}")
    print("gctf{FAKE_FAKE_FAKE_FAKE_FAKE_FAKE}")
    exit(0)
else:
    exit(1)

#io.interactive()
